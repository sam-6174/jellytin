access_by_lua_block {
  local cjson = require "cjson"
  local ip_cache_expiration_seconds = 86400

  function is_active_authentik_user_ip(client_ip)
    local ip_cache = ngx.shared.authentik_ip_cache
    local is_ip_cached, _flags = ip_cache:get(client_ip)
    if is_ip_cached then
      return true
    elseif is_active_authentik_session(client_ip) then
      ip_cache:flush_expired()
      success, err, _forcible = ip_cache:set(client_ip, true, ip_cache_expiration_seconds)
      if err then
        ngx.log(ngx.ERR, "is_active_authentik_user_ip error: ", err)
        error(err)
      end
      return true
    else
      return false
    end
  end
  
  function is_active_authentik_session(client_ip)
    ngx.req.read_body()
    local res = ngx.location.capture(
      "/authentik_sessions/",
      {
        method = ngx.HTTP_GET,
        args = {
          last_ip = client_ip,
          ordering = "expires desc",
          page_size = 1
        }
      }
    )
    if res.status ~= 200 then
      ngx.log(ngx.ERR, "is_active_authentik_session res.status: ", res.status)
      return false
    end

    local json_res = cjson.decode(res.body)
    if json_res.pagination.count == 0 then
      return false
    end

    local session = json_res.results[1]
    local expiration_time = parse_iso8601(session.expires)
    return os.time() < expiration_time
  end

  function parse_iso8601(stamp)
    local groups, err = ngx.re.match(
      stamp,
      [[^(?<year>[0-9]{4})-(?<month>[0-9]{1,2})-(?<day>[0-9]{1,2})T(?<hour>[0-9]{1,2}):(?<min>[0-9]{1,2}):(?<sec>[0-9]{1,2})(?:\.[0-9]+)?Z$]]
    )
    if err or (groups == nil) then
      ngx.log(ngx.ERR, "parse_iso8601 err: " .. err .. " groups: " .. groups)
      error(err)
    end
    return os.time(groups)
  end
  
  if not is_active_authentik_user_ip(ngx.var.remote_addr) then
    ngx.exit(ngx.HTTP_FORBIDDEN)
  end
}
